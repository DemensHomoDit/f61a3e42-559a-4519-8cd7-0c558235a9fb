#!/usr/bin/env python3
import sqlite3
import json
from pathlib import Path

DB_PATH = str(Path(__file__).resolve().parent.parent / "bot.db")

def debug_load_setting(key: str):
    print(f"\nüîç –û—Ç–ª–∞–¥–∫–∞ _load_setting –¥–ª—è –∫–ª—é—á–∞: {key}")
    print(f"üìÅ –ü—É—Ç—å –∫ –ë–î: {DB_PATH}")
    
    try:
        con = sqlite3.connect(DB_PATH)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
        
        cur = con.cursor()
        cur.execute("CREATE TABLE IF NOT EXISTS settings(key TEXT PRIMARY KEY, value TEXT)")
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ settings –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞")
        
        cur.execute("SELECT value FROM settings WHERE key=?", (key,))
        row = cur.fetchone()
        print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç SQL –∑–∞–ø—Ä–æ—Å–∞: {row}")
        
        con.close()
        
        if not row:
            print("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
            
        val = row[0]
        print(f"üìÑ –°—ã—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {repr(val)}")
        
        # –ï—Å–ª–∏ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if not val:
            print("‚ùå –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
            return None
            
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
            print("üîÑ –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON...")
            obj = json.loads(val)
            print(f"‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: {type(obj)} = {repr(obj)}")
            
            if isinstance(obj, str):
                print("‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É")
                return obj
            if isinstance(obj, dict) and 'value' in obj:
                result = str(obj['value'])
                print(f"‚úÖ –ò–∑–≤–ª–µ–∫–∞–µ–º value –∏–∑ dict: {repr(result)}")
                return result
            result = str(obj)
            print(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É: {repr(result)}")
            return result
        except (json.JSONDecodeError, TypeError) as e:
            print(f"‚ö†Ô∏è JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            print(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É: {repr(val)}")
            return val
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–±–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö)
keys = ['app_name', 'app_version', 'default_currency']

for key in keys:
    result = debug_load_setting(key)
    print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {key}: {repr(result)}")
    print("-" * 50) 